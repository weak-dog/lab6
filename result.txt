lno@1       @0           block     children: [@1 ]
lno@2       @1       statement          stmt: declation     children: [@2 @3 ]      sibling: [@4 @7 @12 @15 @18 ]
lno@2       @2            type          type: int
lno@2       @3        variable      var_name: a
lno@3       @4       statement          stmt: declation     children: [@5 @6 ]      sibling: [@7 @12 @15 @18 ]
lno@3       @5            type          type: int
lno@3       @6        variable      var_name: b
lno@4       @7       statement          stmt: assign     children: [@8 @9 ]      sibling: [@12 @15 @18 ]
lno@4       @8        variable      var_name: a
lno@4       @9       statement          stmt: assign     children: [@10 @11 ]
lno@4       @10        variable      var_name: b
lno@4       @11           const          type: int         value: 3
lno@5       @12       statement          stmt: printf     children: [@13 @14 ]      sibling: [@15 @18 ]
lno@5       @13           const          type: string         value: "%d"
lno@5       @14        variable      var_name: a
lno@6       @15       statement          stmt: printf     children: [@16 @17 ]      sibling: [@18 ]
lno@6       @16           const          type: string         value: "%d"
lno@6       @17        variable      var_name: b
lno@7       @18       statement          stmt: return     children: [@19 ]
lno@7       @19           const          type: int         value: 0



# define strings here
.section   .data
_S0:
	.string "%d"
_S1:
	.string "%d"

# define variables and temp variables here
.section .bss
_a:
	.zero	4
	.align	4
_b:
	.zero	4
	.align	4
.section .text
	.globl main
main:
	movl $3, %eax
	movl %eax, _b
	movl _b, %eax
	movl %eax, _a
	pushl _a
	pushl $_S0
	call printf
	addl $8,%esp
	pushl _b
	pushl $_S1
	call printf
	addl $8,%esp
	pushl $0
	call exit
